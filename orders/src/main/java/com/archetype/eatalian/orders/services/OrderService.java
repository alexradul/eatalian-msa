/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 *
 * Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
 */

package com.archetype.eatalian.orders.services;

import com.archetype.eatalian.orders.domain.Account;
import com.archetype.eatalian.orders.domain.Order;
import com.archetype.eatalian.orders.domain.Product;
import com.archetype.eatalian.orders.domain.ProductRequest;
import com.archetype.eatalian.orders.ports.AccountService;
import com.archetype.eatalian.orders.ports.CatalogueService;
import com.archetype.eatalian.orders.repositories.OrderRepository;
import com.archetype.eatalian.orders.resources.OrderResource;
import com.archetype.eatalian.orders.resources.ProductRequestResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class OrderService {
    private static final Logger logger = LoggerFactory.getLogger(OrderService.class);

    private final OrderRepository repository;
    private final AccountService accountService;
    private final CatalogueService catalogueService;

    @Autowired
    public OrderService(OrderRepository repository,
                        AccountService accountService,
                        CatalogueService catalogueService) {
        this.repository = repository;
        this.accountService = accountService;
        this.catalogueService = catalogueService;
    }

    public Iterable<Order> findAll() {
        return repository.findAll();
    }

    public Order findOne(Long id) {
        return repository
                .findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find Order by " + id));
    }

    public Order save(Order entity) {
        return repository.save(entity);
    }

    public void delete(Order entity) {
        repository.delete(entity);
    }

    public void delete(Long id) {
        delete(findOne(id));
    }

    public Order create(OrderResource resource) {
        Order order = new Order()
                .setDateOfCreation(LocalDateTime.now());

        Account account = accountService.findAccount(resource.getAccountRef());

        resource.getProductRequests().stream()
                .map(this::createProductRequest)
                .forEach(productRequest ->
                        order.linkRequests(productRequest)
                                .updateSubTotal(productRequest.getTotalPrice()));


        return order.linkAccount(account)
                .linkShipmentAddress(account.getShipmentAddress())
                .linkBillingAddress(account.getBillingAddress());
    }

    private ProductRequest createProductRequest(ProductRequestResource req) {
        ProductRequest request = new ProductRequest();
        Product product = catalogueService.getProduct(req.getSku());
        request.setQuantity(req.getQuantity());
        request.setComment(req.getComment());
        request.setPricePerUnit(product.getPrice());
        return request;
    }
}